// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it.
// =========================================================================
#ifndef EVENT_LCOBJECT_H
#define EVENT_LCOBJECT_H 1

#include "LCRTRelations.h"

#include <vector>
#include <memory>

namespace EVENT {
class LCObject ;

/**Vector of (pointers to) LCObjects.*/
class LCObjectVec : public std::vector<std::shared_ptr<EVENT::LCObject>>
{
public:
    void push_back(EVENT::LCObject* obj) {
        std::vector<std::shared_ptr<EVENT::LCObject>>::push_back(std::shared_ptr<EVENT::LCObject>(obj));
    }
    EVENT::LCObject* operator[](size_t idx) {
        return (std::vector<std::shared_ptr<EVENT::LCObject>>::operator[](idx)).get();
    }
    EVENT::LCObject* operator[](size_t idx) const {
        return (std::vector<std::shared_ptr<EVENT::LCObject>>::operator[](idx)).get();
    }
};

using namespace lcrtrel ;
/** The generic object that is held in an LCCollection.
 *  Every object stored in an LCCollection, i.e. in an LCEvent has to
 *  implement this interface.
 *
 * @author gaede
 * @version Jun 7, 2003
 * fg 20040405 moved here from hep.lcio.data
 */

class LCObject : public LCRTRelations {

public:
    /// Destructor.
    virtual ~LCObject() { /* nop */; }

    /** Returns an object id for internal (debugging) use in LCIO.
     */
    virtual int id() const = 0;

//
// public interface LCObject extends Cloneable, LCRTRelations{
//     /** Returns an object id for internal (debugging) use in LCIO.
//      */
//     public int id() const ;
//

    /** Deep copy of the object. C++ implementations should return the
     *  concrete type (virtual constructor). No reasonable implementation yet.
     *  Do not use this method.
     */
    public:
	 virtual LCObject* clone() const {  return 0 ; }
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_LCOBJECT_H */
