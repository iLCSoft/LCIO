// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_LCEVENT_H
#define EVENT_LCEVENT_H 1

#include <string>
#include <vector>

#include "EVENT/LCParameters.h"
#include "Exceptions.h"
#include "LCIOTypes.h"
#include "LCRTRelations.h"

namespace EVENT {

class LCCollection;

/**The main event interface. Holds named collections
 * with elements of type LCObject ('untyped'). Users have to cast to
 * the corresponding types.  
 *
 * @author gaede
 * @version $Id: LCEvent.aid,v 1.14 2007-11-08 19:35:37 gaede Exp $
 * @see LCCollection
 */

class LCEvent {

public: 
    /// Destructor.
    virtual ~LCEvent() { /* nop */; }

    /** Return the run number off this event.
     */
    virtual int getRunNumber() const = 0;

    /** Returns this event's number .
     */
    virtual int getEventNumber() const = 0;

    /** Returns the name of the detector setup used in the simulation.
     */
    virtual const std::string & getDetectorName() const = 0;

    /** Returns the time stamp of the event.
     *  Timestamp is a unique 64 bit integer.<br>
     *  Definition: ns since January 1, 1970, 00:00:00 GMT
     */
    virtual long64 getTimeStamp() const = 0;

    /** Returns the event weight.
     */
    virtual double getWeight() const = 0;

    /** Returns the names of the collections in the  event.
     */
    virtual const std::vector<std::string>  * getCollectionNames() const = 0;

    /** Returns the collection for the given name.
     *
     * @throws DataNotAvailableException
     */
    virtual LCCollection * getCollection(const std::string & name) const  = 0;

    /** Returns the collection for the given name and transfers the ownership of the collection
     *  to the caller. The caller is responsible for deleting the collection _after_ the Event is 
     *  deleted. The collection is still in the event but flagged as transient 
     *  after the call returns.<br>
     *  This is usefull when you want to keep the collection for the next events.<br>
     *  Use with care!
     * @throws DataNotAvailableException
     */
    virtual LCCollection * takeCollection(const std::string & name) const  = 0;

    /** Adds a collection with the given name (has to be a valid C/C++ variable name). 
     *	Throws an exception if the name already
     *  exists in the event. NB: Adding collections is allowed even when the event is 'read only'.
     *
     *@see validateCollectionName
     *@throws EventException
     */ 
    virtual void addCollection(LCCollection * col, const std::string & name)  = 0;

    /** Removes (and deletes) the collection with name (if it exists in the event). 
     * Throws an exception if the event is 'read only' as defined by the read mode in LCReader.
     *
     *@throws ReadOnlyException
     */ 
    virtual void removeCollection(const std::string & name)  = 0;

    /** Parameters defined for this event.
     */
    virtual const LCParameters & getParameters() const = 0;

    /** Parameters defined for this event.
     */
    virtual LCParameters & parameters() = 0;
    
    /** Get the runtime extensions for this event.
     */
    virtual lcrtrel::LCRTRelations & runtime() = 0;

//     //fg20040528:   added relations to the event
//     /** Returns the names of the relations in the  event.
//      */
//     public const String[]*  getRelationNames() const ;
//     /** Returns the relation for the given name.
//      *
//      * @throws DataNotAvailableException
//      */
//      public LCRelation* getRelation(const String& name) const throws DataNotAvailableException ;
//     /** Adds a relation with the given name. Throws an exception if the name already
//      * exists in the event. NB: Adding relations is allowed even when the event is 'read only'.
//      * 
//      *@throws EventException
//      */ 
//     public void addRelation(LCRelation* col ,const  String& name ) throws EventException ;
//     /** Removes (and deletes) the relation with name (if it exists in the event). 
//      * Throws an exception if the event is 'read only' as defined by the read mode in LCReader.
//      *
//      *@throws ReadOnlyException
//      */ 
//     public void removeRelation(const  String& name ) throws ReadOnlyException ;
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_LCEVENT_H */
