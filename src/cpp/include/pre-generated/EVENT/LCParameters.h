// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_LCPARAMETERS_H
#define EVENT_LCPARAMETERS_H 1

#include <string>

#include "LCIOSTLTypes.h"

namespace EVENT {

/** Simple interface to store generic named parameters of type
 *  int, float and string. 
 *  It can be used  to store (user) meta data that is 
 *  run, event or collection dependent. 
 * 
 * @author gaede 
 * @version $Id: LCParameters.aid,v 1.3 2009-11-20 11:20:20 gaede Exp $
 * @see LCRunHeader.parameters()
 * @see LCEvent.parameters()
 * @see LCCollection.parameters()
 */

class LCParameters {

public: 
    /// Destructor.
    virtual ~LCParameters() { /* nop */; }

    /** Returns the first integer value for the given key.
     */
    virtual int getIntVal(const std::string & key) const = 0;

    /** Returns the first float value for the given key.
     */
    virtual float getFloatVal(const std::string & key) const = 0;

    /** Returns the first double value for the given key.
     */
    virtual double getDoubleVal(const std::string & key) const = 0;

    /** Returns the first string value for the given key.
     */
    virtual const std::string & getStringVal(const std::string & key) const = 0;

    /** Adds all integer values for the given key to values.
     *  Returns a reference to values for convenience.
     */
    virtual IntVec & getIntVals(const std::string & key, IntVec & values) const = 0;

    /** Adds all float values for the given key to values.
     *  Returns a reference to values for convenience.
     */
    virtual FloatVec & getFloatVals(const std::string & key, FloatVec & values) const = 0;

    /** Adds all double values for the given key to values.
     *  Returns a reference to values for convenience.
     */
    virtual DoubleVec & getDoubleVals(const std::string & key, DoubleVec & values) const = 0;

    /** Adds all string values for the given key to values.
     *  Returns a reference to values for convenience.
     */
    virtual StringVec & getStringVals(const std::string & key, StringVec & values) const = 0;

    /** Returns a list of all keys of integer parameters.
     */
    virtual const StringVec & getIntKeys(StringVec & keys) const = 0;

    /** Returns a list of all keys of float parameters.
     */
    virtual const StringVec & getFloatKeys(StringVec & keys) const = 0;

    /** Returns a list of all keys of double parameters.
     */
    virtual const StringVec & getDoubleKeys(StringVec & keys) const = 0;

    /** Returns a list of all keys of string parameters.
     */
    virtual const StringVec & getStringKeys(StringVec & keys) const = 0;

    /** The number of integer values stored for this key.
     */ 
    virtual int getNInt(const std::string & key) const = 0;

    /** The number of float values stored for this key.
     */ 
    virtual int getNFloat(const std::string & key) const = 0;

    /** The number of double values stored for this key.
     */ 
    virtual int getNDouble(const std::string & key) const = 0;

    /** The number of string values stored for this key.
     */ 
    virtual int getNString(const std::string & key) const = 0;

    /** Set integer value for the given key.
     */
    virtual void setValue(const std::string & key, int value) = 0;

    /** Set float value for the given key.
     */
    virtual void setValue(const std::string & key, float value) = 0;

    /** Set double value for the given key.
     */
    virtual void setValue(const std::string & key, double value) = 0;

    /** Set string value for the given key.
     */
    virtual void setValue(const std::string & key, const std::string & value) = 0;

    /** Set integer values for the given key.
     */
    virtual void setValues(const std::string & key, const IntVec & values) = 0;

    /** Set float values for the given key.
     */
    virtual void setValues(const std::string & key, const FloatVec & values) = 0;

    /** Set double values for the given key.
     */
    virtual void setValues(const std::string & key, const DoubleVec & values) = 0;

    /** Set string values for the given key.
     */
    virtual void setValues(const std::string & key, const StringVec & values) = 0;
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_LCPARAMETERS_H */
