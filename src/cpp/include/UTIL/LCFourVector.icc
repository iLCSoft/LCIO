#include "IMPL/MCParticleImpl.h"
#include "IMPL/ReconstructedParticleImpl.h"
#include "Exceptions.h"


namespace UTIL{
  

  typedef LCFourVector<EVENT::MCParticle> MCParticle4V ;
  typedef LCFourVector<IMPL::MCParticleImpl> MCParticleI4V ;
  
  typedef LCFourVector<EVENT::ReconstructedParticle> ReconstructedParticle4V ;
  typedef LCFourVector<IMPL::ReconstructedParticleImpl> ReconstructedParticleI4V ;


  // specializations for the different LCObjects that have 4 vector information

  template<>
  inline LCFourVector<EVENT::MCParticle>::LCFourVector( const EVENT::MCParticle* mcPart ) :
     HepLorentzVector(mcPart->getMomentum()[0],
		     mcPart->getMomentum()[1],
		     mcPart->getMomentum()[2],
		     mcPart->getEnergy() )  ,
     _lcObj( mcPart )
  {
  }
  template<>
  inline LCFourVector<EVENT::MCParticle>::LCFourVector(const EVENT::LCObject* lcObj){
    
    _lcObj = dynamic_cast<const EVENT::MCParticle* >( lcObj ) ;

    if( _lcObj == 0 )
      throw EVENT::Exception("Dynamic cast failed for LCFourVector() !") ;

    const double* p =  _lcObj->getMomentum() ;
    setPx( p[0] ) ;
    setPy( p[1] ) ;
    setPz( p[2] ) ;
    // use the mass to set the energy in order to avoid rounding problems
    setVectM( v() , _lcObj->getMass() ) ;
    //    setE( _lcObj->getEnergy() )  ;
  }

  template<>
  inline LCFourVector<EVENT::ReconstructedParticle>::LCFourVector(const EVENT::ReconstructedParticle* part ):
    HepLorentzVector(part->getMomentum()[0],
		     part->getMomentum()[1],
		     part->getMomentum()[2],
		     part->getEnergy() ) , 
    _lcObj( part )
  {
  }
  template<>
  inline LCFourVector<EVENT::ReconstructedParticle>::LCFourVector(const EVENT::LCObject* lcObj){
    
    _lcObj = dynamic_cast<const EVENT::ReconstructedParticle* >( lcObj ) ;

    if( _lcObj == 0 )
      throw EVENT::Exception("Dynamic cast failed for LCFourVector() !") ;

    const double* p =  _lcObj->getMomentum() ;
    setPx( p[0] ) ;
    setPy( p[1] ) ;
    setPz( p[2] ) ;
    setE( _lcObj->getEnergy() )  ;
  }
  
} // end namespace

