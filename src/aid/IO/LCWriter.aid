package hep.lcio.io;
@java{
import hep.lcio.exceptions.* ;
}

/**Interface for writing data with LCIO. Uses interfaces 
 * from EVENT/hep.lcio.event.
 * Use LCFactory to instantiate a corresponding LCWriter object
 * for the output format at hand (SIO only, so far).
 *
 * @see LCFactory
 * @author gaede
 * @version Mar 4, 2003
 */
public interface LCWriter {

    /** Opens a file for writing. If file with given name exists, 
     * an exception is thrown. Use append or new mode instead.
     *
     *@throws IOException
     */
@ifdef cpp
    public void open(const String& filename ) ;
@else
    public void open(const String& filename ) throws IOException ;
@endif

    /** Opens a file for writing.
     * Possible write modes are: LCIO::WRITE_NEW
     * (existing files are replaced) and LCIO::WRITE_APPEND. 
     *
     *@throws IOException
     */
@ifdef cpp
    public void open(const String& filename , int writeMode ) ;
@else
    public void open(const String& filename , int writeMode ) throws IOException ;
@endif

    
    /** Set the compression level - needs to be called before open() otherwise
     *  call will have no effect. If not called the Writer will use default compression.<br>
     *  Valid compression levels are:
     *  <ul>
     *    <li> level <  0 : default compression </li>
     *    <li> level == 0 : no compression</li>
     *    <li> level >  0 : compression level (typically 1 (fastest) - 9 (best compression))
     *    </li>
     *  </ul>
     *  
     *  Status:  (v01-09)<br>
     *  C++: experimental code - don't use for production<br>
     *  Java: not implemented
     * 
     *@param level compression level
     */
    public void setCompressionLevel(int level) ;


    /** Writes the given run header to file.
     *
     *@throws IOException
     */
@ifdef cpp
    public void writeRunHeader(const LCRunHeader*  hdr) ;
@else
    public void writeRunHeader(const LCRunHeader*  hdr) throws IOException ;
@endif

    /** Writes the given event to file.
     *
     *@throws IOException
     */
@ifdef cpp
    public void writeEvent(const LCEvent*  evt) ;
@else
    public void writeEvent(const LCEvent*  evt) throws IOException ;
@endif
    
    /** Closes the output file/stream.
     *
     *@throws IOException
     */
@ifdef cpp
    public void close() ;
@else
    public void close() throws IOException ;
@endif

    /** Flushes the output file/stream.
     *
     *@throws IOException
     */
@ifdef cpp
    public void flush() ;
@else
    public void flush() throws IOException ;
@endif
}
