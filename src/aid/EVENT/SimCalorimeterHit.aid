package hep.lcio.event ;

/** The generic simulated calorimeter hit. 
 * 
 * @author gaede
 * @version $Id: SimCalorimeterHit.aid,v 1.8 2006-03-24 13:25:52 gaede Exp $
 */

public interface SimCalorimeterHit extends LCObject {
    

@ifdef cpp
@cpp{
    /** Useful typedef for template programming with LCIO */
    typedef SimCalorimeterHit lcobject_type ;

}
@endif

    /**Returns the detector specific (geometrical) cell id.
     */
    public int getCellID0() const ;
    
    /**Returns the second detector specific (geometrical) cell id.
     *  0 if information is not stored -  check the flag word (bit CHBIT_ID1) 
     *  of the collection. Default is to store only cellid0.
     */
    public int getCellID1() const ;
    
    /** Returns the energy of the hit in [GeV].
     */
    public float getEnergy() const ;
    
    /** Returns the position of the hit in world coordinates.
     *  NULL if information is not stored -  check the flag word (bit CHBIT_LONG) 
     *  of the collection.
     */
    public const float3V getPosition() const ;	

    
    /** Returns the position where the energy deposited (step) occurred
     * optional, only if bit LCIO::CHBIT_STEP is set.   
     */
    public const float3V getStepPosition( int i ) const ;
    

    /** Returns the number of MC contributions to the hit. 0 if 
     * information is not stored. Renamed to getNMCContributions.
     * @deprecated
     * @see getNMCContributions()
     */
    public int getNMCParticles() const ;


    /** Returns the number of MC contributions to the hit. 0 if 
     * information is not stored. There are two levels of detail: if 
     * collection flag bit LCIO.CHBIT_STEP==1 then all simulator steps' 
     * contributions to the hit are stored, otherwise there is only one 
     * contribution for every particle entering the calorimeter.
     */
    public int getNMCContributions() const ;

    /** Returns the energy in [GeV] of the i-th contribution to the hit.
     * @see getNMCContributions()
     */ 
    public float getEnergyCont(int i) const ;

    /** Returns the time in [ns] of the i-th contribution to the hit.
     * @see getNMCContributions()
     */
    public float getTimeCont(int i) const ;
    
    /** Returns the step length of the i-th contribution to the hit.
     * @see getNMCContributions()
     */
    public float getLengthCont(int i) const ;

    /** Returns the PDG code of the shower particle that caused this contribution.
     *  Check the flag word bit LCIO.CHBIT_STEP of the collection whether this information 
     *  is available. 
     * @see getNMCContributions()
     */ 
    public int  getPDGCont(int i) const ;
    
    /** Returns the MCParticle that caused the shower responsible for this contribution to the hit.
     *  This is the particle that flew into the calorimeter and not the shower particle that made the 
     *  energy deposition.
     * @see getNMCContributions()
     */
    public  MCParticle* getParticleCont( int i) const ;

}
