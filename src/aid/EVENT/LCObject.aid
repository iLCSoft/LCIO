package hep.lcio.event ;
@ifdef cpp
@cpp{
#include <vector>
}
@endif
    @ifdef IGNORE // we have to split the cpp stuff - includes should go outside namespace 
    @endif

@ifdef cpp
@cpp{
class LCObject ;
/**Vector of (pointers to) LCObjects.*/
typedef std::vector<LCObject*> LCObjectVec ;
using namespace lcrtrel ;
}
@endif

/** The generic object that is held in an LCCollection. 
 *  Every object stored in an LCCollection, i.e. in an LCEvent has to 
 *  implement this interface.
 * 
 * @author gaede 
 * @version Jun 7, 2003
 * fg 20040405 moved here from hep.lcio.data
 */
    
public interface LCObject extends Cloneable, LCRTRelations{
@ifdef cpp

@cpp{
  LCObject() = default ;
  LCObject(const LCObject&) = default ;
}
  
    /** Returns an object id for internal (debugging) use in LCIO.
     */
    public int id() const ;
@endif
// @ifdef cpp
// public interface LCObject extends Cloneable, LCRTRelations{

//     /** Returns an object id for internal (debugging) use in LCIO.
//      */
//     public int id() const ;
// @else
//  public interface LCObject extends Cloneable {
    
// @endif

@cpp{
    /** Deep copy of the object. C++ implementations should return the 
     *  concrete type (virtual constructor). No reasonable implementation yet.
     *  Do not use this method.
     */
    public:
	 virtual LCObject* clone() const {  return 0 ; } 
}

}
