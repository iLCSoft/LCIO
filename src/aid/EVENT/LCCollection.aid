package hep.lcio.event ;

@java{
import hep.lcio.exceptions.* ;
}
/** The generic collection used in LCIO. Holds arbitrary objects of type LCObject.
 * 
 * @author gaede 
 * @version $Id: LCCollection.aid,v 1.11 2005-03-02 16:22:58 gaede Exp $
 * @see LCObject
 * @see LCIO
 */
@ifdef java
public interface LCCollection extends java.util.List
@else
public interface LCCollection
@endif
{
    /**Returns the number of elements in the collection.
     * Same as size().
     */
    public int getNumberOfElements() const ;
    
    /** Returns the type name of the collection - valid names are defined in LCIO.
     */
    public const String& getTypeName() const ;
    
    /** Returns pointer to element at index - no range check, use getNumberOfEntries().
     */
    public LCObject* getElementAt(int index) const ;

    /** Returns flag word for collection. Bits 16-31 are reserved for LCIO
     *  Depending on the object type stored they have a special meaning, e.g. 
     *  for SimCalorimeterHits: <br>
     *  CHBIT_LONG = 31   -  store position <br>
     *  CHBIT_BARREL = 30 -  endcap or barrel <br>
     *  CHBIT_ID1 = 29 -   cellid1 is sored <br>
     *  CHBIT_PDG = 28 - store pdg of secondaries <br>
     *  &nbsp;<br>
     *  Bit 16 is used to flag collection as transient <br>
     *  Bit 17 is used to flag collection as default <br>
     *  Bit 18 is used to flag collection as subset <br>
     *  Bits 0-15 are subdetector/user specific.
     * @see isTransient()
     */
    public int getFlag() const ;

    /**Transient bit in flag word.
     */
@ifdef cpp
@cpp{
    static const int BITTransient = 16 ;
    static const int BITDefault   = 17 ;
    static const int BITSubset    = 18 ;
}@else
    public static const int BITTransient = 16 ;
    public static const int BITDefault   = 17 ;
    public static const int BITSubset    = 18 ;
@endif

    /** True if collection is transient, i.e. will not be written to any LCIO file.
     *  Convenient method that checks bit BITTransient of the flag word.
     */
    public boolean isTransient() const ;

    /** True if collection is the default collection for the given type.
     *  This implies that the collection is complete and unambigous.
     *  Convenient method that checks bit BITDefault of the flag word.
     */
    public boolean isDefault() const ;


    /** True if the collection holds a subset of objects from other collections. 
     *  If the collection is not transient only the pointers/references to the original
     *  objects will be stored.
     *  Convenient method that checks bit BITSubset of the flag word.
     */
    public boolean isSubset() const ;


    /** Adds the given element to (end of) the collection. Throws an exception 
     * if the collection (event) is 'read only'.
     *
     * @throws ReadOnlyException
     */
@ifdef cpp
    public void addElement(LCObject* obj) ;
@else
    public void addElement(LCObject* obj) throws ReadOnlyException ;
@endif
    
    /** Removes the i-th element from the collection. Throws an exception 
     * if the collection (event) is 'read only'.
     *
     * @throws ReadOnlyException
     */
@ifdef cpp
    public void removeElementAt(int i) ;
@else
    public void removeElementAt(int i) throws ReadOnlyException ;
@endif
    

    /** Set the flag word. This is allowed in 'read only' mode.
     */
    public void setFlag(int flag)  ;


    /** Parameters defined for this collection.
     */
    public const LCParameters& getParameters() const ;

@ifdef cpp
   /** Parameters defined for this collection.
    * Can be used to modify the collection paramters. 
    */
    public LCParameters& parameters() ;
@endif



}

