package hep.lcio.event;

@ifdef cpp
@cpp{
class Vertex ;
/**Vector of (pointers to) Vertices.*/
typedef std::vector<Vertex*> VertexVec ;
}
@endif

/** The Vertex class for LCIO. 
 *  <p>UNDER DEVELOPMENT!</p>
 *  see: <a href="http://forum.linearcollider.org/index.php?t=tree&goto=473">here</a><br>
 *
 *  <p>UNDER DEVELOPMENT!</p>
 *  
 * @author gaede, engels
 * @version $Id: Vertex.aid,v 1.3 2006-09-21 06:10:36 gaede Exp $
 */

public interface Vertex extends LCObject {
    

@ifdef cpp
@cpp{
   Vertex() = default ;
   Vertex(const Vertex&) = default ;
}
@cpp{
    /** Useful typedef for template programming with LCIO */
    typedef Vertex lcobject_type ;
}
@endif

    /** Checks if the Vertex is the primary vertex of the event.
     *  Only one primary vertex per event is allowed
     */
    public boolean isPrimary() const ;
    
    /** Type code for the algorithm that has been used to create the vertex - check/set the 
     *  collection parameters AlgorithmName and  AlgorithmType.
     */
    //public int getAlgorithmType() const ;
    public const String& getAlgorithmType() const ;	

     /** Chi squared of the vertex fit.
     */
    public float getChi2() const ;	

    /** Probability of the vertex fit.
     */
    public float getProbability() const ;	

    /** Position of the vertex
     */
    public const float3V getPosition() const;

    /** Covariance matrix of the position (stored as lower triangle matrix, i.e. 
     *  cov(xx),cov(y,x),cov(y,y) ).
     */
    public const FloatVec & getCovMatrix() const ;

    /** Additional parameters related to this vertex - check/set the collection
     *  parameter "VertexParameterNames" for the parameters' meaning.
     */
    public const FloatVec & getParameters() const ;

    /** Returns Reconstructed Particle associated to the Vertex
     */
    public ReconstructedParticle * getAssociatedParticle() const;
}

