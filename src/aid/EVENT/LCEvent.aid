package hep.lcio.event;

@java{
import hep.lcio.exceptions.* ;
}
/**The main event interface. Holds named collections
 * with elements of type LCObject ('untyped'). Users have to cast to
 * the corresponding types.  
 *
 * @author gaede
 * @version $Id: LCEvent.aid,v 1.14 2007-11-08 19:35:37 gaede Exp $
 * @see LCCollection
 */

public interface LCEvent {
    
    /** Return the run number off this event.
     */
    public int getRunNumber() const ;
    
    /** Returns this event's number .
     */
    public int getEventNumber() const ;
    
    /** Returns the name of the detector setup used in the simulation.
     */
    public const String& getDetectorName() const ;
    
    /** Returns the time stamp of the event.
     *  Timestamp is a unique 64 bit integer.<br>
     *  Definition: ns since January 1, 1970, 00:00:00 GMT
     */
     public long64 getTimeStamp() const ;
    
    /** Returns the event weight.
     */
    public  double getWeight() const ;


    /** Returns the names of the collections in the  event.
     */
    public const String[]*  getCollectionNames() const ;


    /** Returns the collection for the given name.
     *
     * @throws DataNotAvailableException
     */
     public LCCollection* getCollection(const String& name) const throws DataNotAvailableException ;

@ifdef cpp
    /** Returns the collection for the given name or a nullptr if not existing.
     */
     public LCCollection* getCollectionNoThrow(const String& name) const;
@endif

@ifdef cpp
    /** Returns the collection for the given name and transfers the ownership of the collection
     *  to the caller. The caller is responsible for deleting the collection _after_ the Event is 
     *  deleted. The collection is still in the event but flagged as transient 
     *  after the call returns.<br>
     *  This is usefull when you want to keep the collection for the next events.<br>
     *  Use with care!
     * @throws DataNotAvailableException
     */
     public LCCollection* takeCollection(const String& name) const throws DataNotAvailableException ;
@endif

    /** Adds a collection with the given name (has to be a valid C/C++ variable name). 
     *	Throws an exception if the name already
     *  exists in the event. NB: Adding collections is allowed even when the event is 'read only'.
     *
     *@see validateCollectionName
     *@throws EventException
     */ 
    public void addCollection(LCCollection* col ,const  String& name ) throws EventException ;
    
    /** Removes (and deletes) the collection with name (if it exists in the event). 
     * Throws an exception if the event is 'read only' as defined by the read mode in LCReader.
     *
     *@throws ReadOnlyException
     */ 
    public void removeCollection(const  String& name ) throws ReadOnlyException ;
    
    /** Parameters defined for this event.
     */
    public const LCParameters& getParameters() const ;

@ifdef cpp
    /** Parameters defined for this event.
     */
    public LCParameters& parameters() ;
@endif




//     //fg20040528:   added relations to the event

//     /** Returns the names of the relations in the  event.
//      */
//     public const String[]*  getRelationNames() const ;


//     /** Returns the relation for the given name.
//      *
//      * @throws DataNotAvailableException
//      */
//      public LCRelation* getRelation(const String& name) const throws DataNotAvailableException ;


//     /** Adds a relation with the given name. Throws an exception if the name already
//      * exists in the event. NB: Adding relations is allowed even when the event is 'read only'.
//      * 
//      *@throws EventException
//      */ 
//     public void addRelation(LCRelation* col ,const  String& name ) throws EventException ;
    
//     /** Removes (and deletes) the relation with name (if it exists in the event). 
//      * Throws an exception if the event is 'read only' as defined by the read mode in LCReader.
//      *
//      *@throws ReadOnlyException
//      */ 
//     public void removeRelation(const  String& name ) throws ReadOnlyException ;
    

}
