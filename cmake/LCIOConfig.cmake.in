##############################################################################
# cmake configuration file for LCIO
#
# Exported Targets:
#
#   LCIO::lcio            Base LCIO library
#   LCIO::lcioF77         Fortran77 bindings library
#   SIO::sio              The SIO library (ONLY if builtin SIO is used)
#
#
# Exported Variables:
# The following variables are exported to keep a bit of backward compatibility
#
#   LCIO_LIBRARIES  : list of LCIO libraries (NOT including COMPONENTS)
#   LCIO_INCLUDE_DIRS  : list of paths to be used with INCLUDE_DIRECTORIES
#   LCIO_LIBRARY_DIRS  : list of paths to be used with LINK_DIRECTORIES#
#
# @author Jan Engels, Desy
##############################################################################
@PACKAGE_INIT@

set_and_check(LCIO_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
mark_as_advanced( LCIO_INCLUDE_DIRS )

include(CMakeFindDependencyMacro)
find_dependency(Threads)

# Other dependencies depend on the configuration we are using
if(@BUILD_ROOTDICT@)
  find_dependency(ROOT @ROOT_VERSION@)
endif()

if(@SIO_FOUND@)
  find_dependency(SIO)
else()
  # If we have builtin SIO make the targets available
  if(NOT TARGET SIO::sio)
    include("${CMAKE_CURRENT_LIST_DIR}/SIOTargets.cmake")
  endif()
endif()

if(NOT TARGET LCIO::lcio)
  include("${CMAKE_CURRENT_LIST_DIR}/LCIOTargets.cmake")
endif()

check_required_components(LCIO)

# Make the target based approach backwards compatible by also exporting
# something in LCIO_LIBRARIES
get_target_property(LCIO_LIBRARY_DIRS LCIO::lcio LOCATION)
set(LCIO_LIBRARIES LCIO::lcio)
mark_as_advanced(LCIO_LIBRARIES LCIO_LIBRARY_DIRS)

# ---------- final checking ---------------------------------------------------
INCLUDE( FindPackageHandleStandardArgs )
# set LCIO_FOUND to TRUE if all listed variables are TRUE and not empty
# LCIO_COMPONENT_VARIABLES will be set if FIND_PACKAGE is called with REQUIRED argument
FIND_PACKAGE_HANDLE_STANDARD_ARGS( LCIO DEFAULT_MSG LCIO_INCLUDE_DIRS LCIO_LIBRARIES ${LCIO_COMPONENT_VARIABLES} )
